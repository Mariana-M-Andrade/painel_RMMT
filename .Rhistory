library(readr)
sinasc_1996_2024 <- read_csv("~/UFES/OOBr/Morte Materna Tardia/MMT/Painel OOBr/Data painel OOBr GitHub/R/databases/sinasc_1996_2024.csv")
View(sinasc_1996_2024)
##TRATANDO BASE DE DADOS DO SINASC
sinasc_1996_2024 <- sinasc_1996_2024 %>%
pivot_longer(
cols = starts_with("raca_mae_") | starts_with("faltante_raca_"),  # Selecione colunas que começam com 'raca_mae_' ou 'faltante_raca_'
names_to = "racacor",                                              # Nova coluna que armazena os nomes das raças
values_to = "nascidos_racacor"                                     # Nova coluna com os valores de nascidos vivos
)
# Substituindo o prefixo 'raca_mae_' pelos nomes das raças
sinasc_1996_2024 <- sinasc_1996_2024 %>%
mutate(racacor = case_when(
racacor == "raca_mae_branca" ~ "Branca",
racacor == "raca_mae_preta" ~ "Preta",
racacor == "raca_mae_parda" ~ "Parda",
racacor == "raca_mae_amarela" ~ "Amarela",
racacor == "raca_mae_indigena" ~ "Indígena",
racacor == "faltante_raca_mae" ~ "Ignorado",
TRUE ~ racacor # Caso haja outras colunas que começam com 'raca_mae_'
))
sinasc <- sinasc_1996_2024 %>%
select(ano, uf, nascidos, racacor, nascidos_racacor, sigla_uf)
sinasc <- sinasc %>%
group_by(ano)
View(sinasc_1996_2024)
View(sinasc)
write.csv(sinasc, "sinasc.csv", row.names = FALSE)
shiny::runApp()
runApp('painel2.R')
runApp('painel2.R')
runApp('painel2.R')
runApp('painel2.R')
runApp('painel2.R')
library(shiny); runApp('painel2.R')
df_mt_desc <- read.csv("df_mt_desc_tardia.csv")
obitos_mt_ofc <- read.csv("obitos_mt_ofc_tardia.csv")
sinasc <- read.csv("sinasc.csv")
br_uf <- read_state(year = 2020, simplified = TRUE)
library("dplyr")
library("shinydashboard")
library("readr")
library("shiny")
library("summarytools")
library("highcharter")
library("pander")
library("tidyverse")
library("janitor")
library("janitor")
library("shiny")
library("reactable")
library("reactablefmtr")
library("openxlsx")
library("gtsummary")
library("gt")
library("glue")
library("ggplot2")
library("geobr")
#Filtrando as bases
df_mt_desc <- df_mt_desc %>%
filter(ano >= 2015 & ano<= 2022) %>%
filter(capitulo_cid10 != "XX - Causas externas de morbidade e de mortalidade") %>%
filter(idade >= 10 & idade <= 49) %>%
mutate(categoria = str_sub(causabas_categoria, end = 3))
obitos_mt_ofc <- obitos_mt_ofc %>%
filter(ano >= 2015 & ano<= 2022) %>%
filter(idade >= 10 & idade <= 49) %>%
mutate(categoria = str_sub(causabas_categoria, end = 3))
sinasc <- sinasc %>%
rename(estado = uf) %>%
rename(uf = sigla_uf)
# Juntando as bases de Óbitos desconsiderados e Óbitos oficiais
all_obitos <- bind_rows(df_mt_desc, obitos_mt_ofc)
# Mudando o tipo da variável
all_obitos$ano <- as.character(all_obitos$ano)
sinasc$ano <- as.character(sinasc$ano)
# Agrupando por ano e uf, e somando os obitos
all_obitos <- all_obitos %>%
group_by(ano, uf, regiao, idade, racacor, categoria) %>%
summarise(obitos = sum(obitos, na.rm = TRUE), .groups = 'drop')
omt_filtrados <- reactive({
if (input$selectNivelOMT == "Nacional") {
if (length(input$selectRegiaoOMT) == 5) {
all_obitos |>
filter(ano == input$selectAnoOMT
) |>
mutate(regiao = "Todas") |>
arrange(ano)
} else {
all_obitos |>
filter(ano == input$selectAnoOMT,
regiao %in% input$selectRegiaoOMT) |>
arrange(ano)
}
} else {
all_obitos |>
filter(ano == input$selectAnoOMT,
uf %in% input$selectEstadoOMT) |>
arrange(ano)
}
})
nasc_filtrados <- reactive({
if (input$selectNivelOMT == "Nacional") {
if (length(input$selectRegiaoOMT) == 5) {
sinasc |>
filter(ano == input$selectAnoOMT) |>
mutate(regiao = "Todas") |>
arrange(ano)
} else {
sinasc |>
filter(ano == input$selectAnoOMT,
regiao %in% input$selectRegiaoOMT) |>
arrange(ano)
}
} else {
sinasc |>
filter(ano == input$selectAnoOMT,
uf %in% input$selectEstadoOMT) |>
arrange(ano)
}
})
rmmt_rc <- reactive({
omt <- omt_filtrados()
nasc <- nasc_filtrados()
omt$ano <- as.character(omt$ano)
nasc$ano <- as.character(nasc$ano)
# Agrupando por ano, uf, e mantendo as variáveis idade e racacor
omt <- omt %>%
group_by(ano, uf, regiao, idade, racacor) %>%  # Remova categoria, se não for necessária
summarise(obitos = sum(obitos, na.rm = TRUE), .groups = 'drop')
rmmt_rc <- left_join(omt, nasc, by = c("ano", "uf", "racacor"))
# Remove NA
rmmt_rc <- rmmt_rc %>%
filter(!is.na(uf)) %>%
filter(!is.na(racacor))  # Adiciona filtro para racacor, se necessário
# Criando a variável RMM
rmmt_rc <- rmmt_rc %>%
group_by(uf, racacor) %>%  # Adicione racacor para calcular corretamente
summarise(
obitos = sum(as.numeric(obitos), na.rm = TRUE),
nascidos_racacor = sum(as.numeric(nascidos_racacor), na.rm = TRUE)
) %>%
mutate(rmm = round((obitos / nascidos_racacor) * 100000, 2)) %>%
ungroup()
return(rmmt_rc)
})
# O mesmo ajuste para rmmt_idade
rmmt_idade <- reactive({
omt <- omt_filtrados()
nasc <- nasc_filtrados()
omt$ano <- as.character(omt$ano)
nasc$ano <- as.character(nasc$ano)
# Agrupando e mantendo idade
omt <- omt %>%
group_by(ano, uf, regiao, idade) %>%  # Inclua racacor se necessário
summarise(obitos = sum(obitos, na.rm = TRUE), .groups = 'drop')
rmmt_idade <- left_join(omt, nasc, by = c("ano", "uf"))
# Remove NA
rmmt_idade <- rmmt_idade %>%
filter(!is.na(uf))
# Criando a variável RMM
rmmt_idade <- rmmt_idade %>%
group_by(uf) %>%
summarise(
obitos = sum(as.numeric(obitos), na.rm = TRUE),
nascidos = sum(as.numeric(nascidos), na.rm = TRUE)
) %>%
mutate(rmm = round((obitos / nascidos) * 100000, 2)) %>%
ungroup()
return(rmmt_idade)
})
# Capturando os dados corretos
data1 <- rmmt_idade()
runApp('painel2.R')
# Criando a variável RMM
rmmt_idade <- rmmt_idade %>%
group_by(uf) %>%
summarise(
obitos = sum(as.numeric(obitos), na.rm = TRUE),
nascidos = sum(as.numeric(nascidos), na.rm = TRUE)
) %>%
mutate(rmm = round((obitos / nascidos) * 100000, 2)) %>%
ungroup()
runApp('painel2.R')
runApp('painel2.R')
options(expressions = 500000)
runApp('painel2.R')
str(all_obitos)
runApp('painel2.R')
req(omt, nasc)
dados_rc <- reactive({
omt <- omt_filtrados()
nasc <- nasc_filtrados()
req(omt, nasc)
# Agrupando por ano, uf, e mantendo as variáveis idade e racacor
omt <- omt %>%
group_by(ano, uf, regiao, idade, racacor) %>%
summarise(obitos = sum(obitos, na.rm = TRUE), .groups = 'drop')
dados_rc <- left_join(omt, nasc, by = c("ano", "uf", "racacor"))
# Remove NA
dados_rc <- dados_rc %>%
filter(!is.na(uf))
})
runApp('painel2.R')
#Testando inputs
omt_filtrados <- reactive({
if (input$selectNivelOMT == "Nacional") {
if (length(input$selectRegiaoOMT) == 5) {
all_obitos |>
filter(ano == input$selectAnoOMT
) |>
mutate(regiao = "Todas") |>
arrange(ano)
} else {
all_obitos |>
filter(ano == input$selectAnoOMT,
regiao %in% input$selectRegiaoOMT) |>
arrange(ano)
}
} else {
all_obitos |>
filter(ano == input$selectAnoOMT,
uf %in% input$selectEstadoOMT) |>
arrange(ano)
}
})
# Lista de inputs fictícios para teste
input <- list(
selectAnoOMT = 2022,  # Ano selecionado
selectNivelOMT = "Nacional",  # Nível de análise selecionado
selectRegiaoOMT = c("Norte", "Nordeste", "Sudeste"),  # Regiões selecionadas
selectEstadoOMT = c("SP", "RJ")  # Estados selecionados (somente será usado se o nível for 'Estadual')
)
# Verificar se os inputs estão corretos
print(input$selectAnoOMT)
print(input$selectNivelOMT)
print(input$selectRegiaoOMT)
print(input$selectEstadoOMT)
# Testar a função reactive usando a lista de inputs
test_omt_filtrados <- function() {
if (input$selectNivelOMT == "Nacional") {
if (length(input$selectRegiaoOMT) == 5) {
# Retorna um resultado simulado para o nível Nacional com todas as regiões
print("Filtrando para nível Nacional com todas as regiões.")
} else {
# Retorna um resultado simulado para o nível Nacional com regiões selecionadas
print("Filtrando para nível Nacional com regiões específicas.")
}
} else {
# Retorna um resultado simulado para o nível Estadual
print("Filtrando para nível Estadual.")
}
}
# Rodar o teste
test_omt_filtrados()
nasc_filtrados <- reactive({
if (input$selectNivelOMT == "Nacional") {
sinasc |>
filter(ano == input$selectAnoOMT) |>
arrange(ano)
} else {
sinasc |>
filter(ano == input$selectAnoOMT,
uf %in% input$selectEstadoOMT) |>
arrange(ano)
}
})
# Lista de inputs fictícios para teste
input <- list(
selectAnoOMT = 2022,  # Ano selecionado
selectNivelOMT = "Nacional",  # Nível de análise selecionado
selectRegiaoOMT = c("Norte", "Nordeste", "Sudeste"),  # Regiões selecionadas
selectEstadoOMT = c("SP", "RJ")  # Estados selecionados (somente será usado se o nível for 'Estadual')
)
# Verificar se os inputs estão corretos
print(input$selectAnoOMT)
print(input$selectNivelOMT)
print(input$selectRegiaoOMT)
print(input$selectEstadoOMT)
# Testar a função reactive usando a lista de inputs
omt_filtrados <- reactive({
if (input$selectNivelOMT == "Nacional") {
if (length(input$selectRegiaoOMT) == 5) {
all_obitos |>
filter(ano == input$selectAnoOMT
) |>
mutate(regiao = "Todas") |>
arrange(ano)
} else {
all_obitos |>
filter(ano == input$selectAnoOMT,
regiao %in% input$selectRegiaoOMT) |>
arrange(ano)
}
} else {
all_obitos |>
filter(ano == input$selectAnoOMT,
uf %in% input$selectEstadoOMT) |>
arrange(ano)
}
})
nasc_filtrados <- reactive({
if (input$selectNivelOMT == "Nacional") {
sinasc |>
filter(ano == input$selectAnoOMT) |>
arrange(ano)
} else {
sinasc |>
filter(ano == input$selectAnoOMT,
uf %in% input$selectEstadoOMT) |>
arrange(ano)
}
})
dados_rc <- reactive({
omt <- omt_filtrados()
nasc <- nasc_filtrados()
req(omt, nasc)
# Agrupando por ano, uf, e mantendo as variáveis idade e racacor
omt <- omt %>%
group_by(ano, uf, regiao, idade, racacor) %>%
summarise(obitos = sum(obitos, na.rm = TRUE), .groups = 'drop')
dados_rc <- left_join(omt, nasc, by = c("ano", "uf", "racacor"))
# Remove NA
dados_rc <- dados_rc %>%
filter(!is.na(uf))
})
# Criando a variável RMM
rmmt_rc <- reactive({
dados_rc() %>%
summarise(
obitos = sum(as.numeric(obitos), na.rm = TRUE),
nascidos = sum(as.numeric(nascidos), na.rm = TRUE)
) %>%
mutate(rmm = round((obitos / nascidos) * 100000, 2))
})
# O mesmo ajuste para rmmt_idade
dados_idade <- reactive({
omt <- omt_filtrados()
nasc <- nasc_filtrados()
# Agrupando e mantendo idade
omt <- omt %>%
group_by(ano, uf, regiao, idade) %>%  # Inclua racacor se necessário
summarise(obitos = sum(obitos, na.rm = TRUE), .groups = 'drop')
dados_idade <- left_join(omt, nasc, by = c("ano", "uf"))
# Remove NA
dados_idade <- dados_idade %>%
filter(!is.na(uf))
})
# Criando a variável RMM
rmmt_idade <- reactive({
dados_idade() %>%
summarise(
obitos = sum(as.numeric(obitos), na.rm = TRUE),
nascidos = sum(as.numeric(nascidos), na.rm = TRUE)
) %>%
mutate(rmm = round((obitos / nascidos) * 100000, 2))
})
# Gráfico RMM tardia por idade
output$plot1 <- highcharter::renderHighchart({
# Verifique se as colunas 'idade' e 'rmm' existem no dataframe
if ("idade" %in% colnames(rmmt_idade()) & "rmm" %in% colnames(rmmt_idade())) {
# Definindo um vetor de cores simples
cols <- c("#1f78b4", "#33a02c", "#e31a1c", "#ff7f00", "#6a3d9a", "#b15928") # Exemplo de cores
hchart(rmmt_idade(),
type = "point",
hcaes(x = idade, y = rmm)) %>%
hc_xAxis(title = list(text = "Idade")) %>%
hc_yAxis(title = list(text = "RMM Tardia")) %>%
hc_add_theme(hc_theme_elementary()) %>%
hc_colors(cols)  # Aplicamos o vetor de cores
} else {
# Notifique se as colunas não existirem
showNotification("As variáveis 'idade' ou 'rmm' não foram encontradas nos dados.", type = "error")
}
})
rmmt_idade()
runApp('painel2.R')
runApp('painel2.R')
library(shiny); runApp('painel2.R')
runApp('painel2.R')
runApp('painel2.R')
input <- list(
selectAnoMAPA = 2021,  # Ano selecionado
selectRacaMAPA = c("Amarela", "Branca", "Ignorado", "Indígena", "Parda", "Preta"),
selectIdadeMAPA = c(10, 49)
)
# Calculando a RMM tardia com os inputs
obitos_filtrados <- reactive({
all_obitos |>
filter(ano == input$selectAnoMAPA,
racacor %in% input$selectRacaMAPA,
idade >= input$selectIdadeMAPA[1] & idade <= input$selectIdadeMAPA[2])
})
nascidos_filtrados <- reactive({
sinasc |>
filter(ano == input$selectAnoMAPA,
racacor %in% input$selectRacaMAPA)
})
# Juntando as bases de Óbitos e nascidos vivos
obit_nasc <- reactive({
obitos <- obitos_filtrados()
nascidos <- nascidos_filtrados()
obit_nasc <- left_join(obitos, nascidos, by = c("ano", "uf")) %>%
filter(!is.na(uf)) %>%
group_by(ano, uf) %>%
summarise(
obitos = sum(as.numeric(obitos), na.rm = TRUE),
nascidos_racacor = sum(as.numeric(nascidos_racacor), na.rm = TRUE)
) %>%
mutate(rmm = round((obitos / nascidos_racacor) * 100000, 2)) %>%
ungroup()
})
# Criando o mapa
output$mapaRMM <- renderPlot({
dados_mapa <- obit_nasc()
# Juntando os dados de RMM com os dados geográficos das UFs
br_uf1 <- reactive(left_join(br_uf, dados_mapa, by = c("abbrev_state" = "uf")))
ggplot(data = br_uf1()) +
geom_sf(aes(fill = rmm), color = "white") +
scale_fill_gradient(low = "lightgreen", high = "purple", na.value = "grey50", name = "RMM Tardia") +
theme_minimal() +
theme(legend.position = "right")
})
dados_mapa <- obit_nasc()
teste_all_obitos %>% all_obitos
teste_all_obitos <- all_obitos %>%
filter(ano == 2021)
teste_nascidos <- sinasc%>%
filter(ano == 2021)
obit_nasc <- left_join(teste_all_obitos, teste_nascidos, by = c("ano", "uf"))
View(teste_all_obitos)
View(obit_nasc)
teste_obit_nasc <- left_join(teste_all_obitos, teste_nascidos, by = c("ano", "uf", "racacor"))
View(teste_obit_nasc)
teste_obit_nasc <- full_join(teste_all_obitos, teste_nascidos, by = c("ano", "uf", "racacor"))
View(teste_obit_nasc)
teste_obit_nasc <- left_join(teste_all_obitos, teste_nascidos, by = c("ano", "uf", "racacor"))
View(teste_obit_nasc)
View(teste_all_obitos)
View(teste_nascidos)
teste_obit_nasc <- bind_rows(teste_all_obitos, teste_nascidos, by = c("ano", "uf", "racacor"))
teste_obit_nasc <- bind.rows(teste_all_obitos, teste_nascidos, by = c("ano", "uf", "racacor"))
teste_obit_nasc <- bind_rows(teste_all_obitos, teste_nascidos, by = c("ano", "uf", "racacor"))
teste_obit_nasc <- right_join(teste_all_obitos, teste_nascidos, by = c("ano", "uf", "racacor"))
teste_obit_nasc <- right_join(teste_all_obitos, teste_nascidos, by = c("ano", "uf"))
teste_obit_nasc <- left_join(teste_all_obitos, teste_nascidos, by = c("ano", "uf", "racacor"))
knitr::opts_chunk$set(echo = TRUE)
#Juntando as bases de óbitos e nascidos vivos
obit_nasc <- full_join(all_obitos, sinasc, by = c("ano","uf"))
obit_nasc <- full_join(all_obitos, sinasc, by = c("ano","uf"))
View(obit_nasc)
View(teste_nascidos)
teste_nascidos <- teste_nascidos %>%
group_by(racacor, uf)
View(sinasc)
runApp('painel2.R')
View(sinasc)
library(readr)
sinasc_1996_2024 <- read_csv("~/UFES/OOBr/Morte Materna Tardia/MMT/Painel OOBr/Data painel OOBr GitHub/R/databases/sinasc_1996_2024.csv")
View(sinasc_1996_2024)
View(sinasc)
View(teste_nascidos)
teste_nascidos <- sinasc%>%
filter(ano == 2021)
View(teste_nascidos)
View(sinasc)
View(sinasc)
sinasc <- sinasc %>%
rename(estado = uf) %>%
rename(uf = sigla_uf) %>%
filter(ano >= 2015 & ano<= 2022)
View(sinasc)
sinasc <- sinasc %>%
rename(estado = uf) %>%
rename(uf = sigla_uf) %>%
filter(ano >= 2015 & ano<= 2022)
sinasc <- sinasc %>%
rename(estado = uf)
View(sinasc)
sinasc <- read.csv("sinasc.csv")
sinasc <- read.csv("sinasc.csv")
View(sinasc)
sinasc <- sinasc %>%
rename(estado = uf)%>%
rename(uf = sigla_uf) %>%
filter(ano >= 2015 & ano<= 2022)
View(sinasc)
library(readr)
sinasc_mapa <- read_csv("sinasc.mapa.csv")
View(sinasc_mapa)
sinasc_mapa <- sinasc_mapa %>%
select(ano, uf, nascidos)
View(sinasc_1996_2024)
View(sinasc)
sinasc <- sinasc_1996_2024 %>%
select(ano, uf, sigla_uf, nascidos, raca_mae_branca, raca_mae_preta,
raca_mae_amarela, raca_mae_parda, raca_mae_indigena, faltante_raca_mae)
sinasc <- sinasc_1996_2024 %>%
select(ano, uf, sigla_uf, nascidos, raca_mae_branca, raca_mae_preta,
raca_mae_amarela, raca_mae_parda, raca_mae_indigena, faltante_raca_mae) %>%
rename(estado = uf)%>%
rename(uf = sigla_uf) %>%
filter(ano >= 2015 & ano<= 2022)
View(sinasc)
sinasc <- sinasc_1996_2024 %>%
select(ano, uf, sigla_uf, nascidos, raca_mae_branca, raca_mae_preta,
raca_mae_amarela, raca_mae_parda, raca_mae_indigena, faltante_raca_mae) %>%
rename(estado = uf)%>%
rename(uf = sigla_uf) %>%
filter(ano >= 2015 & ano<= 2022) %>%
group_by(ano, uf)
View(sinasc)
